<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cbirdq`s blog</title>
  <subtitle>I can play</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-03T03:07:44.425Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cbirdq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速排序</title>
    <link href="http://yoursite.com/2016/06/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2016/06/03/快速排序/</id>
    <published>2016-06-03T02:51:47.000Z</published>
    <updated>2016-06-03T03:07:44.425Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QuickSort&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] theArray = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		recQuickSort(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, theArray.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;recQuickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(left &amp;gt;= right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p = partition(left, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		recQuickSort(left, p - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		recQuickSort(p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; pivot = theArray[right];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftptr = left, rightptr = right - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(theArray[++leftptr] &amp;lt; pivot);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(theArray[--rightptr] &amp;gt; pivot);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(leftptr &amp;gt;= rightptr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			swap(leftptr, rightptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		swap(leftPtr, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; leftptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; tmp = theArray[left];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		theArray[left] = theArray[right];		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		theArray[right] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>String源码解读</title>
    <link href="http://yoursite.com/2016/06/02/String%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://yoursite.com/2016/06/02/String源码解读/</id>
    <published>2016-06-02T15:13:51.000Z</published>
    <updated>2016-06-02T15:14:31.004Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="jdk源码学习" scheme="http://yoursite.com/categories/jdk%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>位排序</title>
    <link href="http://yoursite.com/2016/06/02/%E4%BD%8D%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2016/06/02/位排序/</id>
    <published>2016-06-02T14:58:51.000Z</published>
    <updated>2016-06-02T15:00:09.015Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见的简单排序算法</title>
    <link href="http://yoursite.com/2016/06/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2016/06/02/常用的排序算法/</id>
    <published>2016-06-02T14:23:39.000Z</published>
    <updated>2016-06-03T02:44:35.901Z</updated>
    
    <content type="html">&lt;p&gt;本文介绍几种常见的简单排序算法，包括冒泡排序，选择排序和插入排序。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;冒泡排序算法的思路：&lt;br&gt;算法进行n-1趟排序，每一趟排序从未排序数组的起始位置开始，通过比较和交换的方式将最大值排到未排序数组的尾部。&lt;br&gt;比较和交换的规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;比较两个元素的值&lt;/li&gt;
&lt;li&gt;如果左边元素的值大于右边元素的值，则交换两个元素的位置；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向右移动第一个位置，接着比较两个元素的值 &lt;/p&gt;
 &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] theArray)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; out = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, in = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; out &amp;lt; theArray.length ; out++) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//算法进行n-1趟排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; in &amp;lt; theArray.length - out; in++) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(theArray[in] &amp;gt; theArray[in + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				tmp = theArray[in];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				theArray[in] = theArray[in + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				theArray[in + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h2&gt;&lt;p&gt;选择排序算法的思路：&lt;br&gt;    &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;selectSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] theArray)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; out, in, max;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(out = theArray.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; out &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; out--) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//n-1趟排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		max = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(in = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; in &amp;lt;= out; in++ ) &lt;span class=&quot;comment&quot;&gt;//每一趟找出最大值的下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			max = in;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(theArray[in] &amp;gt; theArray[max]) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//在一趟排序的最后，将最大值放到数组的尾部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tmp = theArray[in];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			theArray[in] = theArray[max];	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			theArray[max] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h2&gt;&lt;p&gt;插入排序算法的思路：&lt;br&gt;    &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insertSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] theArray)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; out, in, ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; current;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(out = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; out &amp;lt; theArray.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		current = theArray[out];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ptr = out - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(ptr &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; current &amp;lt; theArray[p]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			theArray[ptr + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = theArray[ptr];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ptr --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		theArray[ptr + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = current;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍几种常见的简单排序算法，包括冒泡排序，选择排序和插入排序。
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>中文分词</title>
    <link href="http://yoursite.com/2016/06/02/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
    <id>http://yoursite.com/2016/06/02/中文分词/</id>
    <published>2016-06-02T14:06:18.000Z</published>
    <updated>2016-06-02T14:07:16.668Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="分词" scheme="http://yoursite.com/categories/%E5%88%86%E8%AF%8D/"/>
    
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="分词" scheme="http://yoursite.com/tags/%E5%88%86%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>hexo你的博客</title>
    <link href="http://yoursite.com/2016/06/02/hexo-your-blog/"/>
    <id>http://yoursite.com/2016/06/02/hexo-your-blog/</id>
    <published>2016-06-02T06:39:54.000Z</published>
    <updated>2016-06-02T13:23:30.986Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;hexo&lt;/strong&gt;出自台湾大学生 tommy351 之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。只需要几个简单命令，你就可以完成一切。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo n #写文章
hexo g #生成
hexo d #部署 # 可与hexo g合并为 hexo d -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面逐步介绍Hexo+GitHub博客搭建过程。&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;h3 id=&quot;安装Node和Git&quot;&gt;&lt;a href=&quot;#安装Node和Git&quot; class=&quot;headerlink&quot; title=&quot;安装Node和Git&quot;&gt;&lt;/a&gt;安装Node和Git&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js 官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 官网&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;注册和配置GitHub&quot;&gt;&lt;a href=&quot;#注册和配置GitHub&quot; class=&quot;headerlink&quot; title=&quot;注册和配置GitHub&quot;&gt;&lt;/a&gt;注册和配置GitHub&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先注册一个&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 帐号&lt;/li&gt;
&lt;li&gt;建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.com』&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;生成SSH密钥&quot;&gt;&lt;a href=&quot;#生成SSH密钥&quot; class=&quot;headerlink&quot; title=&quot;生成SSH密钥&quot;&gt;&lt;/a&gt;生成SSH密钥&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先设置你的用户名密码：&lt;pre&gt;&lt;code&gt;git config --global user.email &amp;quot;123456789@qq.com&amp;quot;
git config --global user.name &amp;quot;cbirdq&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;生成密钥：&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;123456789@qq.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;添加SSH公钥到GitHub中：『Account settings -&amp;gt; SSH Keys -&amp;gt; Add SSH Key』&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;npm install -g hexo
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;mkdir blog #创建博客根目录
cd blog #进入根目录
hexo init #初始化
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好啦，至此，全部安装工作已经完成！&lt;/p&gt;
&lt;h2 id=&quot;生成静态页面&quot;&gt;&lt;a href=&quot;#生成静态页面&quot; class=&quot;headerlink&quot; title=&quot;生成静态页面&quot;&gt;&lt;/a&gt;生成静态页面&lt;/h2&gt;&lt;p&gt;在博客根目录下，执行如下命令，生成静态页面至 blog\public\ 目录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo generate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当你修改文章Tag或内容，不能正确重新生成内容，可以删除 hexo\db.json 后重试，还不行就到 public 目录删除对应的文件，重新生成。&lt;/p&gt;
&lt;h2 id=&quot;本地预览&quot;&gt;&lt;a href=&quot;#本地预览&quot; class=&quot;headerlink&quot; title=&quot;本地预览&quot;&gt;&lt;/a&gt;本地预览&lt;/h2&gt;&lt;p&gt;执行如下命令，启动本地服务，进行文章预览调试。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;浏览器输入 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt; 就可以看到效果。如果4000端口被占用，导致网页无法显示，可以通过以下命令指定其他端口。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo server -p 5000
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;写文章&quot;&gt;&lt;a href=&quot;#写文章&quot; class=&quot;headerlink&quot; title=&quot;写文章&quot;&gt;&lt;/a&gt;写文章&lt;/h2&gt;&lt;p&gt;执行new命令，生成指定名称的文章至 blog\source_posts\postName.md 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo new [layout] &amp;quot;postName&amp;quot; #新建文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中layout是可选参数，默认值为post。有哪些layout呢，请到 scaffolds 目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是 hexo\scaffolds\post.md&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: { { title } }
date: { { date } }
tags:
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。&lt;br&gt;我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: { { title } }
date: { { date } }
categories: 
tags: 
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。&lt;/p&gt;
&lt;p&gt;注意，所有文件：后面都必须有个空格，不然会报错。&lt;br&gt;看一下刚才生成的文件 blog\source_posts\postName.md ，内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中
date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改
categories: #文章分类目录，可以为空，注意:后面有个空格
tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里开始使用&lt;a href=&quot;/2016/06/01/markdown-grammar/#more&quot;&gt;markdown语法&lt;/a&gt;格式输入你的正文。&lt;/p&gt;
&lt;h3 id=&quot;photos&quot;&gt;&lt;a href=&quot;#photos&quot; class=&quot;headerlink&quot; title=&quot;photos&quot;&gt;&lt;/a&gt;photos&lt;/h3&gt;&lt;p&gt;在你的文章*.md文件的头上添加 photos 项，然后一行行添加你要展示的照片：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;layout: photo
title: 我的阅历
date: 2085-01-16 07:33:44
tags: [hexo]
photos:
    - http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg
    - http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过测试，文件头上的 layout: photo 可以省略。&lt;br&gt;不想每次都手动添加怎么办？同样的，打开您的 hexo\scaffolds\photo.md&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;layout: { { layout } }
title: { { title } }
date: { { date } }
tags: 
photos: 
    - 
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后每次可以执行带layout的new命令生成照片文章：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo new photo &amp;quot;photoPostName&amp;quot; #新建照片文章
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;description&quot;&gt;&lt;a href=&quot;#description&quot; class=&quot;headerlink&quot; title=&quot;description&quot;&gt;&lt;/a&gt;description&lt;/h3&gt;&lt;p&gt;markdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文 _config.yml 的介绍。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: hexo你的博客
date: 2013-11-22 17:11:54
categories: default
tags: [hexo]
description: 你对本页的描述
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。&lt;/p&gt;
&lt;h3 id=&quot;文章摘要&quot;&gt;&lt;a href=&quot;#文章摘要&quot; class=&quot;headerlink&quot; title=&quot;文章摘要&quot;&gt;&lt;/a&gt;文章摘要&lt;/h3&gt;&lt;p&gt;在需要显示摘要的地方添加如下代码即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;以上是摘要
    &amp;lt;!--more--&amp;gt;
以下是余下全文
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;more以上内容即是文章摘要，在主页显示，more以下内容点击『&amp;gt; Read More』链接打开全文才显示。&lt;/p&gt;
&lt;h3 id=&quot;文件的编码格式&quot;&gt;&lt;a href=&quot;#文件的编码格式&quot; class=&quot;headerlink&quot; title=&quot;文件的编码格式&quot;&gt;&lt;/a&gt;文件的编码格式&lt;/h3&gt;&lt;p&gt;hexo中所有文件的编码格式均是UTF-8。&lt;/p&gt;
&lt;h2 id=&quot;主题设置&quot;&gt;&lt;a href=&quot;#主题设置&quot; class=&quot;headerlink&quot; title=&quot;主题设置&quot;&gt;&lt;/a&gt;主题设置&lt;/h2&gt;&lt;h3 id=&quot;主题安装&quot;&gt;&lt;a href=&quot;#主题安装&quot; class=&quot;headerlink&quot; title=&quot;主题安装&quot;&gt;&lt;/a&gt;主题安装&lt;/h3&gt;&lt;p&gt;网上有很多开源的主题，基本都托管在github上，安装主题的方法就是一句git命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd blog
git clone https://github.com/iissnan/hexo-theme-next themes/NexT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目录是否是NexT无所谓，只要与_config.yml文件一致即可。&lt;br&gt;安装完成后，打开 hexo_config.yml ，修改主题为 NexT&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme: NexT
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;更新主题&quot;&gt;&lt;a href=&quot;#更新主题&quot; class=&quot;headerlink&quot; title=&quot;更新主题&quot;&gt;&lt;/a&gt;更新主题&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;cd themes/NexT
git pull
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;hexo&lt;/strong&gt;出自台湾大学生 tommy351 之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。只需要几个简单命令，你就可以完成一切。
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="http://yoursite.com/2016/06/01/markdown-grammar/"/>
    <id>http://yoursite.com/2016/06/01/markdown-grammar/</id>
    <published>2016-06-01T14:37:18.000Z</published>
    <updated>2016-06-02T13:01:06.493Z</updated>
    
    <content type="html">&lt;p&gt;Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式.Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章标题设置&quot;&gt;&lt;a href=&quot;#文章标题设置&quot; class=&quot;headerlink&quot; title=&quot;文章标题设置&quot;&gt;&lt;/a&gt;文章标题设置&lt;/h2&gt;&lt;p&gt;在文字开头加上&lt;font color=&quot;red&quot;&gt; # &lt;/font&gt;，&lt;font color=&quot;red&quot;&gt; # &lt;/font&gt;的个数表示标题的级数。（一共只有1~6级标题，1级标题字体最大）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##文章标题设置
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;块注释&quot;&gt;&lt;a href=&quot;#块注释&quot; class=&quot;headerlink&quot; title=&quot;块注释&quot;&gt;&lt;/a&gt;块注释&lt;/h2&gt;&lt;p&gt;在文字开头加上&lt;font color=&quot;red&quot;&gt; &amp;gt; &lt;/font&gt;表示块级注释&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 我是块注释
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;这是块注释&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;斜体&quot;&gt;&lt;a href=&quot;#斜体&quot; class=&quot;headerlink&quot; title=&quot;斜体&quot;&gt;&lt;/a&gt;斜体&lt;/h2&gt;&lt;p&gt;使用一对&lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;将需要设置为斜体文字包含在里面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*我是斜体*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;我是斜体&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;粗体&quot;&gt;&lt;a href=&quot;#粗体&quot; class=&quot;headerlink&quot; title=&quot;粗体&quot;&gt;&lt;/a&gt;粗体&lt;/h2&gt;&lt;p&gt;使用一对&lt;font color=&quot;red&quot;&gt; ** &lt;/font&gt;将需要设置为粗体的文字包含在里面      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**我是粗体**
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;我是粗体&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;无序列表&quot;&gt;&lt;a href=&quot;#无序列表&quot; class=&quot;headerlink&quot; title=&quot;无序列表&quot;&gt;&lt;/a&gt;无序列表&lt;/h2&gt;&lt;p&gt;在文字开头添加&lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;，并按空格键，实现无序列表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* 我是无序列表项1
* 我是无序列表项2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;我是无序列表项1&lt;/li&gt;
&lt;li&gt;我是无序列表项2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;有序列表&quot;&gt;&lt;a href=&quot;#有序列表&quot; class=&quot;headerlink&quot; title=&quot;有序列表&quot;&gt;&lt;/a&gt;有序列表&lt;/h2&gt;&lt;p&gt;在数字后面直接跟上&lt;font color=&quot;red&quot;&gt; . &lt;/font&gt;，并按空格键，实现有序列表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 我是有序列表项1
2. 我是有序列表项2
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;我是有序列表项1&lt;/li&gt;
&lt;li&gt;我是有序列表项2&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内联方式：&lt;font color=&quot;red&quot;&gt;[text](url)&lt;/font&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[我是链接](https://www.google.com)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://www.google.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我是链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用方式：&lt;font color=&quot;red&quot;&gt;[text][id]&lt;/font&gt; [id]: url string&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[我是引用][1]  [1]: https://www.google.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;/images/smile2.png&quot; title=&quot;开心兔&quot;&gt;我是引用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;图片&quot;&gt;&lt;a href=&quot;#图片&quot; class=&quot;headerlink&quot; title=&quot;图片&quot;&gt;&lt;/a&gt;图片&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内联方式：&lt;font color=&quot;red&quot;&gt;![alt text](path “Title”)&lt;/font&gt;&lt;pre&gt;&lt;code&gt;![我是图片](/images/smile2.png &amp;quot;开心兔&amp;quot;) #注意：这里根目录指的是public目录
&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;/images/smile2.png&quot; alt=&quot;我是图片&quot; title=&quot;开心兔&quot;&gt;&lt;/li&gt;
&lt;li&gt;引用方式：&lt;font color=&quot;red&quot;&gt;![alt text][id]&lt;/font&gt; [id]: path string&lt;br&gt;&lt;img src=&quot;/images/smile2.png&quot; alt=&quot;我是图片&quot; title=&quot;开心兔&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;使用Tab键或者四个空格&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;code here
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;下划线&quot;&gt;&lt;a href=&quot;#下划线&quot; class=&quot;headerlink&quot; title=&quot;下划线&quot;&gt;&lt;/a&gt;下划线&lt;/h2&gt;&lt;p&gt;在空白行处添加三条&lt;font color=&quot;red&quot;&gt; - &lt;/font&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;part 1
___
part 2
___
part 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;part 1&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;part 2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;part 3&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式.Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="http://yoursite.com/2016/06/01/hexo-command/"/>
    <id>http://yoursite.com/2016/06/01/hexo-command/</id>
    <published>2016-06-01T14:29:48.000Z</published>
    <updated>2016-06-02T13:26:06.492Z</updated>
    
    <content type="html">&lt;h2 id=&quot;hexo-简写&quot;&gt;&lt;a href=&quot;#hexo-简写&quot; class=&quot;headerlink&quot; title=&quot;hexo 简写&quot;&gt;&lt;/a&gt;hexo 简写&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hexo n &amp;quot;我的博客&amp;quot; #新建文章，等价于 heox new &amp;quot;我的博客&amp;quot;
hexo p #草稿，等价于 hexo publish
hexo g #生成静态网页，等价于 hexo generate 
hexo s #启动服务预览，等价于 hexo server
hexo d #部署，等价于 hexo deploy
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;服务器&quot;&gt;&lt;a href=&quot;#服务器&quot; class=&quot;headerlink&quot; title=&quot;服务器&quot;&gt;&lt;/a&gt;服务器&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。
hexo server -s #静态模式
hexo server -p 5000 #更改端口
hexo server -i 192.168.1.1 #自定义 IP

hexo clean #清除缓存 网页正常情况下可以忽略此条命令
hexo g #生成静态网页
hexo d #开始部署
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;监视文件变动&quot;&gt;&lt;a href=&quot;#监视文件变动&quot; class=&quot;headerlink&quot; title=&quot;监视文件变动&quot;&gt;&lt;/a&gt;监视文件变动&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hexo generate #使用 Hexo 生成静态文件快速而且简单
hexo generate --watch #监视文件变动
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;完成后部署&quot;&gt;&lt;a href=&quot;#完成后部署&quot; class=&quot;headerlink&quot; title=&quot;完成后部署&quot;&gt;&lt;/a&gt;完成后部署&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#两个命令的作用是相同的
hexo generate --deploy
hexo deploy --generate
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;草稿&quot;&gt;&lt;a href=&quot;#草稿&quot; class=&quot;headerlink&quot; title=&quot;草稿&quot;&gt;&lt;/a&gt;草稿&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hexo publish [layout] &amp;lt;title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;模版&quot;&gt;&lt;a href=&quot;#模版&quot; class=&quot;headerlink&quot; title=&quot;模版&quot;&gt;&lt;/a&gt;模版&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hexo new &amp;quot;postName&amp;quot; #新建文章
hexo new page &amp;quot;pageName&amp;quot; #新建页面

hexo new [layout] &amp;lt;title&amp;gt;
hexo new photo &amp;quot;My Gallery&amp;quot;
hexo new &amp;quot;Hello World&amp;quot; --lang tw
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;设置文章摘要&quot;&gt;&lt;a href=&quot;#设置文章摘要&quot; class=&quot;headerlink&quot; title=&quot;设置文章摘要&quot;&gt;&lt;/a&gt;设置文章摘要&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#摘要部分
&amp;lt;!--more--&amp;gt; 
#以下是余下全文 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##写作&lt;br&gt;    hexo new page &lt;title&gt;&lt;br&gt;    hexo new post &lt;title&gt;&lt;/title&gt;&lt;/title&gt;&lt;/p&gt;
&lt;h2 id=&quot;推送到服务器上&quot;&gt;&lt;a href=&quot;#推送到服务器上&quot; class=&quot;headerlink&quot; title=&quot;推送到服务器上&quot;&gt;&lt;/a&gt;推送到服务器上&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hexo n #写文章
hexo g #生成
hexo d #部署 #可与hexo g合并为 hexo d -g
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo-简写&quot;&gt;&lt;a href=&quot;#hexo-简写&quot; class=&quot;headerlink&quot; title=&quot;hexo 简写&quot;&gt;&lt;/a&gt;hexo 简写&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hexo n &amp;quot;我的博客&amp;quot; #新建文章，等价于 heox new &amp;quot;我的博客&amp;quot;
hexo p #草稿，等价于 hexo publish
hexo g #生成静态网页，等价于 hexo generate 
hexo s #启动服务预览，等价于 hexo server
hexo d #部署，等价于 hexo deploy
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>volatile的实现原理</title>
    <link href="http://yoursite.com/2016/05/10/volatile/"/>
    <id>http://yoursite.com/2016/05/10/volatile/</id>
    <published>2016-05-10T12:32:09.000Z</published>
    <updated>2016-06-02T13:32:41.429Z</updated>
    
    <content type="html">&lt;p&gt;java中的并发机制依赖于JVM的实现和CPU的指令。java并发机制包括volatile，synchronized和原子操作。本文将探索volatile的底层实现原理。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在并发编程中synchronized和volatile都扮演着重要的角色，volatile是轻量级的synchronized，它在多处理器开发中保证了共享变量的&lt;strong&gt;可见性&lt;/strong&gt;。可见性是指，一个线程修改共享变量时，另外一个线程能读到这个修改的值。volatile变量修饰符如果使用恰当，会比synchronized效率更高，因为它不会引起线程上下文切换和调度。  &lt;/p&gt;
&lt;p&gt;如果一个字段被声明称volatile，那么&lt;strong&gt;java线程内存模型&lt;/strong&gt;会确保所有的线程看到这个变量的值是一致的。&lt;/p&gt;
&lt;h2 id=&quot;volatile在硬件层面上的是如何保证共享变量的可见性的？&quot;&gt;&lt;a href=&quot;#volatile在硬件层面上的是如何保证共享变量的可见性的？&quot; class=&quot;headerlink&quot; title=&quot;volatile在硬件层面上的是如何保证共享变量的可见性的？&quot;&gt;&lt;/a&gt;volatile在硬件层面上的是如何保证共享变量的可见性的？&lt;/h2&gt;&lt;p&gt;为了提高处理速度，cpu一般不和内存直接交互，而是将内存中的数据读到缓存里，然后再进行操作，操作完了不知道何时会写回到内存中。当对一个volatile修饰的共享变量进行写操作时，JVM就会向处理器发送一条&lt;strong&gt;Lock前缀指令&lt;/strong&gt;，将这个变量所在的缓存行写回到内存中。但是，就算写回到内存，其他处理器的缓存中保存的数据仍然是旧的。所以在多处理器下，为了保证各个处理器的缓存是一致的，就会实现一套&lt;strong&gt;缓存一致性协议：&lt;/strong&gt;每个处理器通过嗅探在总线上传播的数据来检查自身缓存的值是否过期，当处理器发现自己缓存行对应的内存地址被修改，就会将当前缓存行设置成无效。当处理器再次对这个数据进行修改时，会重新从系统内存中把数据读到处理器缓存中。&lt;/p&gt;
&lt;h3 id=&quot;volatile的两条实现原则：&quot;&gt;&lt;a href=&quot;#volatile的两条实现原则：&quot; class=&quot;headerlink&quot; title=&quot;volatile的两条实现原则：&quot;&gt;&lt;/a&gt;volatile的两条实现原则：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Lock前缀指令会引起处理器缓存回写到内存。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;java中的并发机制依赖于JVM的实现和CPU的指令。java并发机制包括volatile，synchronized和原子操作。本文将探索volatile的底层实现原理。&lt;br&gt;
    
    </summary>
    
      <category term="java并发编程" scheme="http://yoursite.com/categories/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>并发编程的挑战</title>
    <link href="http://yoursite.com/2016/04/26/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E6%8C%91%E6%88%98/"/>
    <id>http://yoursite.com/2016/04/26/并发编程的挑战/</id>
    <published>2016-04-26T04:47:15.000Z</published>
    <updated>2016-06-02T13:35:11.640Z</updated>
    
    <content type="html">&lt;p&gt;本文主要介绍几种并发编程可能会遇到的挑战，及其解决方案。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;1-上下文切换&quot;&gt;&lt;a href=&quot;#1-上下文切换&quot; class=&quot;headerlink&quot; title=&quot;1. 上下文切换&quot;&gt;&lt;/a&gt;1. 上下文切换&lt;/h2&gt;&lt;p&gt;cpu通过时间片分配算法来循环执行线程，当前线程时间片用完后就会切换到下一线程。但是在切换之前，必须先保存当前线程的上下文，然后再加载下一个线程的上下文，称为上下文的切换。频繁的上下文切换会导致程序的执行效率低下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;减少上下文切换的方法有&lt;strong&gt;无锁并发编程，CAS算法，使用最少线程，协程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无锁并发编程：多线程在竞争锁时会引起上下文的切换。所以多线程在处理数据时，可以用一些方法来避免使用锁，比如讲数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。  &lt;/li&gt;
&lt;li&gt;CAS算法：java的原子并发包使用的是CAS算法来更新数据，不需要加锁。&lt;/li&gt;
&lt;li&gt;使用最少线程：避免创建不需要的线程，比如任务很少，但是创建了很多线程，这就会导致大量线程都处于等待状态。&lt;/li&gt;
&lt;li&gt;协程：在单线程里实现多任务的调度，并在单线程里维持多任务间的切换。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-死锁&quot;&gt;&lt;a href=&quot;#2-死锁&quot; class=&quot;headerlink&quot; title=&quot;2. 死锁&quot;&gt;&lt;/a&gt;2. 死锁&lt;/h2&gt;&lt;p&gt;死锁产生的一种情况就是两个线程之间互相等待对方释放锁。&lt;br&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量避免一个线程同时获取多个锁&lt;/li&gt;
&lt;li&gt;避免线程在锁内部同时占用多个资源，尽量保证一个锁只占用一个资源&lt;/li&gt;
&lt;li&gt;尝试使用定时锁，使用lock.tryLock(timeout)来代替内部锁机制&lt;/li&gt;
&lt;li&gt;对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-资源限制的挑战&quot;&gt;&lt;a href=&quot;#3-资源限制的挑战&quot; class=&quot;headerlink&quot; title=&quot;3. 资源限制的挑战&quot;&gt;&lt;/a&gt;3. 资源限制的挑战&lt;/h2&gt;&lt;p&gt;资源限制是指在进行并发编程时，程序的执行速度受限于计算机硬件资源或软件资源。例如服务器的带宽只有2Mb/s，某个资源的下载速度是1Mb/s，系统启动10线程下载资源，下载速度并不会达到10Mb/s。硬件资源的限制有带宽的上传/下载速度，硬盘读写速度和cpu的处理速度等，软件资源的限制有数据库连接数和socket连接数等。&lt;br&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于硬件资源的限制，可以考虑使用集群并行执行程序&lt;/li&gt;
&lt;li&gt;对于软件资源的限制，可以考虑使用资源池将资源复用，比如数据库连接池等。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍几种并发编程可能会遇到的挑战，及其解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="java并发编程" scheme="http://yoursite.com/categories/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>git remote的用法</title>
    <link href="http://yoursite.com/2016/04/16/git-remote/"/>
    <id>http://yoursite.com/2016/04/16/git-remote/</id>
    <published>2016-04-15T16:21:10.000Z</published>
    <updated>2016-06-02T13:38:42.337Z</updated>
    
    <content type="html">&lt;p&gt;本文主要介绍git remote命令的用法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##查看当前远程仓库&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;git remote&lt;br&gt;不带参数，列出已经存在的远程分支  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git remote   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git remote -v | –verbose&lt;br&gt;列出详细信息，在每个远程分支的名字后面列出远程url  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git remote -v  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin git@github.com:cbirdq/learngit.git (fetch)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin git@github.com:cbirdq/learngit.git （push)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;添加远程仓库&quot;&gt;&lt;a href=&quot;#添加远程仓库&quot; class=&quot;headerlink&quot; title=&quot;添加远程仓库&quot;&gt;&lt;/a&gt;添加远程仓库&lt;/h2&gt;&lt;p&gt;git remote add [shortname]&lt;br&gt;要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git remote  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git remote add pp git://github.com/cbirdq/iprinter.git  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git remote -v  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pp git://github.com/cbirdq/iprinter.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在就可以通过字符串pp代表远程仓库了，比如说要抓取本地仓库没有的信息，可以运行 git fetch pp.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git fetch pp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍git remote命令的用法。&lt;br&gt;
    
    </summary>
    
      <category term="git学习" scheme="http://yoursite.com/categories/git%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers3之Map</title>
    <link href="http://yoursite.com/2016/04/15/OpenLayers3%E4%B9%8BMap/"/>
    <id>http://yoursite.com/2016/04/15/OpenLayers3之Map/</id>
    <published>2016-04-14T16:25:27.000Z</published>
    <updated>2016-06-02T13:50:09.787Z</updated>
    
    <content type="html">&lt;p&gt;未完待续&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;未完待续
    
    </summary>
    
      <category term="OpenLayers3学习" scheme="http://yoursite.com/categories/OpenLayers3%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="OpenLayers3" scheme="http://yoursite.com/tags/OpenLayers3/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers3简介</title>
    <link href="http://yoursite.com/2016/04/14/OpenLayers3%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2016/04/14/OpenLayers3简介/</id>
    <published>2016-04-14T02:46:01.000Z</published>
    <updated>2016-06-02T13:48:33.914Z</updated>
    
    <content type="html">&lt;p&gt;OpenLayers 是一个专为Web GIS 客户端开发提供的JavaScript 类库包，用于实现标准格式发布的地图数据访问。OpenLayers 支持的地图来源包括Google Maps、Yahoo、 Map、微软Virtual Earth 等，用户还可以用简单的图片地图作为背景图，与其他的图层在OpenLayers 中进行叠加，在这一方面OpenLayers提供了非常多的选择。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;在操作方面，OpenLayers 除了可以在浏览器中帮助开发者实现地图浏览的基本效果，比如放大（Zoom In）、缩小（Zoom Out）、平移（Pan）等常用操作之外，还可以进行选取面、选取线、要素选择、图层叠加等不同的操作，甚至可以对已有的OpenLayers 操作和数据支持类型进行扩充，为其赋予更多的功能。同时，在OpenLayers提供的类库当中，它还使用了类库Prototype.js 和Rico 中的部分组件，为地图浏览操作客户端增加Ajax 效果。&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;OpenLayers3(OL3)引入了现代的设计模式，重写了OpenLayers的网页地图库。&lt;br&gt;OL3初始版本的目标是支持版本2提供的大部分功能，采用了大量的商业或者免费的图层资源，最流行的开源vector数据格式。和版本2一样，OL3也支持任何的数据映射方式，同时它还提供了一些额外的功能，例如旋转和动画效果。在之后的版本中，OL3还会加入一些主要的新功能，如3D地图的显示，或者使用WebGL快速显示大量矢量数据。  &lt;/p&gt;
&lt;h2 id=&quot;闭包工具&quot;&gt;&lt;a href=&quot;#闭包工具&quot; class=&quot;headerlink&quot; title=&quot;闭包工具&quot;&gt;&lt;/a&gt;闭包工具&lt;/h2&gt;&lt;p&gt;OL3是基于google闭包工具集开发的，它大量使用了闭包库。  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;OpenLayers 是一个专为Web GIS 客户端开发提供的JavaScript 类库包，用于实现标准格式发布的地图数据访问。OpenLayers 支持的地图来源包括Google Maps、Yahoo、 Map、微软Virtual Earth 等，用户还可以用简单的图片地图作为背景图，与其他的图层在OpenLayers 中进行叠加，在这一方面OpenLayers提供了非常多的选择。
    
    </summary>
    
      <category term="OpenLayers3学习" scheme="http://yoursite.com/categories/OpenLayers3%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="OpenLayers3" scheme="http://yoursite.com/tags/OpenLayers3/"/>
    
  </entry>
  
  <entry>
    <title>qq互联</title>
    <link href="http://yoursite.com/2016/04/12/qq%E4%BA%92%E8%81%94/"/>
    <id>http://yoursite.com/2016/04/12/qq互联/</id>
    <published>2016-04-11T16:43:34.000Z</published>
    <updated>2016-06-02T13:58:07.190Z</updated>
    
    <content type="html">&lt;p&gt;QQ互联开放平台为第三方网站提供了丰富的API。第三方网站接入QQ互联开放平台后，即可通过调用平台提供的API实现用户使用QQ账号登陆网站功能，且可以获取到腾讯QQ用户的相关信息。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;网站接入流程&quot;&gt;&lt;a href=&quot;#网站接入流程&quot; class=&quot;headerlink&quot; title=&quot;网站接入流程&quot;&gt;&lt;/a&gt;网站接入流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先前往&lt;a href=&quot;http://connect.qq.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QQ互联开放平台&lt;/a&gt;进行开发者注册。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册完成后，进行网站接入申请，获取appid和appkey，然后进入开发环节。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;QQ互联开放平台为第三方网站提供了丰富的API。第三方网站接入QQ互联开放平台后，即可通过调用平台提供的API实现用户使用QQ账号登陆网站功能，且可以获取到腾讯QQ用户的相关信息。
    
    </summary>
    
      <category term="qq登陆接口" scheme="http://yoursite.com/categories/qq%E7%99%BB%E9%99%86%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="qq" scheme="http://yoursite.com/tags/qq/"/>
    
  </entry>
  
  <entry>
    <title>git简介</title>
    <link href="http://yoursite.com/2016/04/10/git-introduction/"/>
    <id>http://yoursite.com/2016/04/10/git-introduction/</id>
    <published>2016-04-10T15:12:29.000Z</published>
    <updated>2016-06-02T14:19:20.834Z</updated>
    
    <content type="html">&lt;p&gt;git是一个开源的分布式版本控制系统，由Linus Torvalds开发实现（貌似只花了两周的时间，厉害！）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;git的优势？&quot;&gt;&lt;a href=&quot;#git的优势？&quot; class=&quot;headerlink&quot; title=&quot;git的优势？&quot;&gt;&lt;/a&gt;git的优势？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 版本库本地化，支持离线提交，相对独立，不影响协同开发。&lt;/strong&gt;&lt;br&gt;每个开发者都拥有自己的版本控制库，在自己的版本控制库上可以任意地执行提交代码、回滚代码、创建分支、归并分支等操作。因为是在自己的版本库上操作，所以不用担心会影响到其他的开发者。&lt;br&gt;&lt;strong&gt;2. 更少的仓库污染。&lt;/strong&gt;&lt;br&gt;git对于每个工程只会产生一个.git目录，这个工程所有的版本控制信息都在.git目录下，不会像svn那样在每个目录下都产生.svn目录。&lt;br&gt;&lt;strong&gt;3. 把内容按元数据方式存储，完整克隆版本库。&lt;/strong&gt;&lt;br&gt;所有的版本信息都在.git目录中，它是处于你的机器上的一个克隆版的版本库，它拥有中心版本库所有的东西，例如标签、分支、版本记录等。&lt;br&gt;&lt;strong&gt;4. 支持快速切换分支，且合并速度快。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;5. 分布式版本库，无单点故障，内容完整性好。&lt;/strong&gt;&lt;br&gt;内容存储采用的是SHA1-哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。  &lt;/p&gt;
&lt;h2 id=&quot;分布式VS集中式&quot;&gt;&lt;a href=&quot;#分布式VS集中式&quot; class=&quot;headerlink&quot; title=&quot;分布式VS集中式&quot;&gt;&lt;/a&gt;分布式VS集中式&lt;/h2&gt;&lt;p&gt;集中式版本控制系统，版本库是集中放在中央服务器上的，而干活时用的都是各自的电脑，所有要先从中央服务器上取得最新的版本，然后开始干活，完了再把代码推送到中央服务器上。集中式版本控制系统最大的毛病就是必须联网才能工作。如果是局域网还好，带宽够大，速度够快，可是如果在互联网上，就可能网速很慢。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;git是一个开源的分布式版本控制系统，由Linus Torvalds开发实现（貌似只花了两周的时间，厉害！）。&lt;br&gt;
    
    </summary>
    
      <category term="git学习" scheme="http://yoursite.com/categories/git%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
